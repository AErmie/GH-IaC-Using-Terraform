# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Deploy Spoke VNETs'

on:
  workflow_run:
    workflows: ["Deploy Hub VNET"]
    branches: [master]
    types: 
      - completed
    conclusion: [success]

jobs:
  terraform:
    name: 'Create Spoke VNETs'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./Terraform/Networking/Deployments/Network-Deployment/Spoke-Deploy

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # terraform_version: 0.12.25 You can use this to set the specific version of Terraform to target. 
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="resource_group_name=$sa-resource_group" -backend-config="storage_account_name=$storage_accounts" -backend-config="container_name=$blob_storage" -backend-config="access_key=${{ secrets.SAS_KEY }}" -backend-config="key=$state_file"
      env:
        subscription_id: "c28db86b-8ce1-4755-aa09-fc99f6e0a667"
        application_id: "12c58cc6-53c7-4a2f-bcbc-05ab4e794ebd"
        tenant_id: "b033afe0-c9e4-48f6-99d3-d00269efb830"
        sa-resource_group: "GH-IaC-Using-Terraform"
        storage_accounts: "ghiacusingterraform"
        blob_storage: "tfstate"
        state_file: "tf-statefile-spoke.state"

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var="client_id=$application_id" -var="client_secret=${{ secrets.spn_azuredevops_password }}" -var="tenant_id=$tenant_id" -var="subscription_id=$subscription_id" -var-file="Spoke.tfvars" -out="SpokeDeploy.plan"
      # Error: Saving a generated plan is currently not supported. (So, no -out *.plan file :-( )
      # Error: Run variables are currently not supported. (So, no -var-file='*.tfvars' file :-(, must use *.auto.tfvars instead)
      env:
        subscription_id: "c28db86b-8ce1-4755-aa09-fc99f6e0a667"
        application_id: "12c58cc6-53c7-4a2f-bcbc-05ab4e794ebd"
        tenant_id: "b033afe0-c9e4-48f6-99d3-d00269efb830"

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_run'
      run: terraform apply SpokeDeploy.plan
